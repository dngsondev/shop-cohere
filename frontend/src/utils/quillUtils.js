import productService from '../services/productService';
import { getFullImageUrl, processQuillImageUrls } from './imageUtils';

// Export l·∫°i h√†m t·ª´ imageUtils ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
export const processQuillContent = processQuillImageUrls;

// H√†m x·ª≠ l√Ω content khi hi·ªÉn th·ªã (ƒë·∫£m b·∫£o ·∫£nh c√≥ ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß)
export const processQuillContentForDisplay = (content) => {
    if (!content) return '';

    // S·ª≠ d·ª•ng getFullImageUrl ƒë·ªÉ x·ª≠ l√Ω ·∫£nh gi·ªëng nh∆∞ ·∫£nh s·∫£n ph·∫©m
    return content.replace(
        /<img([^>]*?)src=["']([^"']*?)["']([^>]*?)>/gi,
        (match, beforeSrc, src, afterSrc) => {
            // S·ª≠ d·ª•ng getFullImageUrl ƒë·ªÉ x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n
            const fullImageUrl = getFullImageUrl(src);
            return `<img${beforeSrc}src="${fullImageUrl}"${afterSrc}>`;
        }
    );
};

// H√†m x·ª≠ l√Ω content khi edit (chuy·ªÉn full URL v·ªÅ relative path)
export const processQuillContentForEdit = (content) => {
    if (!content) return '';

    // console.log('üîÑ Processing Quill content for edit:', content);


    try {
        const baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:5000/';

        const processedContent = content.replace(
            /<img([^>]*?)src=["']([^"']*?)["']([^>]*?)>/gi,
            (match, beforeSrc, src, afterSrc) => {
                let relativePath = src;

                // N·∫øu l√† full URL th√¨ chuy·ªÉn v·ªÅ relative path
                if (src.startsWith(baseUrl)) {
                    relativePath = src.replace(baseUrl, '');
                    if (relativePath.startsWith('/')) {
                        relativePath = relativePath.substring(1);
                    }
                }

                // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n b·∫Øt ƒë·∫ßu v·ªõi uploads/
                if (!relativePath.startsWith('uploads/') && relativePath.includes('uploads')) {
                    relativePath = relativePath.substring(relativePath.indexOf('uploads'));
                }

                // Lo·∫°i b·ªè style c≈© n·∫øu c√≥
                const cleanAfterSrc = afterSrc.replace(/\s*style=["'][^"']*["']/gi, '');

                console.log('üìù Processed image src:', relativePath);

                const newSrc = baseUrl + relativePath;

                return `<img${beforeSrc}src="${newSrc}"${cleanAfterSrc}>`;
            }
        );

        return processedContent;
    } catch (error) {
        console.error('Error processing Quill content for edit:', error);
        return content;
    }
};

// Image handler cho ReactQuill v·ªõi fix context issue
export const imageHandler = function () {
    const quillInstance = this;

    const input = document.createElement('input');
    input.setAttribute('type', 'file');
    input.setAttribute('accept', 'image/*');
    input.click();

    input.onchange = async () => {
        const file = input.files[0];
        if (file) {
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                alert('File qu√° l·ªõn! Vui l√≤ng ch·ªçn file nh·ªè h∆°n 5MB.');
                return;
            }

            // Ki·ªÉm tra lo·∫°i file
            if (!file.type.startsWith('image/')) {
                alert('Vui l√≤ng ch·ªçn file h√¨nh ·∫£nh!');
                return;
            }

            const formData = new FormData();
            formData.append('image', file);

            try {
                let range = quillInstance.getSelection(true);
                if (!range) {
                    const length = quillInstance.getLength();
                    quillInstance.setSelection(length - 1);
                    range = { index: length - 1, length: 0 };
                }

                // Ch√®n placeholder text
                quillInstance.insertText(range.index, 'ƒêang t·∫£i h√¨nh ·∫£nh...', 'user');

                // Upload h√¨nh ·∫£nh
                const response = await productService.uploadQuillImage(formData);
                console.log('üì∏ Upload response:', response.data);

                if (response.data.success) {
                    // X√≥a text loading
                    quillInstance.deleteText(range.index, 'ƒêang t·∫£i h√¨nh ·∫£nh...'.length);

                    // L·∫•y URL t·ª´ response - ∆∞u ti√™n imageUrl ho·∫∑c path
                    let imageUrl = response.data.imageUrl || response.data.path || response.data.url;

                    // Ki·ªÉm tra URL h·ª£p l·ªá
                    if (!imageUrl || imageUrl === '//:0') {
                        throw new Error('Invalid image URL received from server');
                    }

                    // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n cho uploads
                    if (imageUrl.startsWith('/uploads/') || imageUrl.startsWith('uploads/')) {
                        // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n c√≥ d·∫°ng uploads/...
                        imageUrl = imageUrl.replace(/^\/uploads\//, 'uploads/');
                    }

                    console.log('üì∏ Inserting image with URL:', imageUrl);

                    // Ch√®n ·∫£nh v·ªõi URL ƒë√£ x·ª≠ l√Ω
                    quillInstance.insertEmbed(range.index, 'image', imageUrl);

                    // ƒê·∫∑t con tr·ªè sau ·∫£nh
                    quillInstance.setSelection(range.index + 1);
                } else {
                    throw new Error(response.data.message || 'Upload failed');
                }
            } catch (error) {
                console.error('Upload error:', error);
                // X√≥a loading text n·∫øu c√≥ l·ªói
                try {
                    const range = quillInstance.getSelection(true) || { index: 0, length: 0 };
                    quillInstance.deleteText(range.index, 'ƒêang t·∫£i h√¨nh ·∫£nh...'.length);
                    quillInstance.insertText(range.index, '‚ùå L·ªói upload h√¨nh ·∫£nh!', { color: '#dc2626' });
                } catch (cleanupError) {
                    console.error('Error during cleanup:', cleanupError);
                }
                alert('L·ªói khi upload h√¨nh ·∫£nh: ' + error.message);
            }
        }
    };
};

// C·∫•u h√¨nh modules cho ReactQuill
export const quillModules = {
    toolbar: {
        container: [
            [{ 'header': [1, 2, 3, false] }],
            ['bold', 'italic', 'underline', 'strike'],
            [{ 'color': [] }, { 'background': [] }],
            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'indent': '-1' }, { 'indent': '+1' }],
            ['blockquote', 'code-block'],
            ['link', 'image'],
            ['clean']
        ],
        handlers: {
            image: imageHandler
        }
    }
};

// Formats cho ReactQuill
export const quillFormats = [
    'header', 'bold', 'italic', 'underline', 'strike',
    'color', 'background', 'list', 'bullet', 'indent',
    'align', 'blockquote', 'code-block', 'link', 'image'
];

// H√†m ƒë·ªÉ normalize content tr∆∞·ªõc khi l∆∞u v√†o DB
export const normalizeQuillContentForDB = (content) => {
    if (!content) return '';

    const baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:5000';

    // Thay th·∫ø c√°c URL ƒë·∫ßy ƒë·ªß th√†nh ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi ƒë·ªÉ l∆∞u v√†o DB
    let normalizedContent = content
        .replace(new RegExp(`${baseUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}/([^"\\s]+)`, 'g'), '$1')
        .replace(/src="\/uploads\//g, 'src="uploads/') // B·ªè d·∫•u / ·ªü ƒë·∫ßu uploads cho DB
        .replace(/src="uploads\//g, 'src="uploads/'); // ƒê·∫£m b·∫£o format ƒë√∫ng

    console.log('üîÑ Normalized content for DB:', normalizedContent);
    return normalizedContent;
};

// H√†m clean up HTML content t·ª´ Quill
export const cleanQuillContent = (content) => {
    if (!content) return '';

    return content
        .replace(/<p><br><\/p>/g, '')
        .replace(/&nbsp;/g, ' ')
        .replace(/ƒêang t·∫£i h√¨nh ·∫£nh\.\.\./g, '')
        .replace(/<span[^>]*color:[^>]*dc2626[^>]*>.*?<\/span>/g, '')
        .trim();
};

// H√†m helper ƒë·ªÉ x·ª≠ l√Ω ·∫£nh trong Quill content m·ªôt c√°ch th·ªëng nh·∫•t
export const processQuillContentWithUploads = (content) => {
    if (!content) return '';

    return content.replace(
        /<img([^>]*?)src=["']([^"']*?)["']([^>]*?)>/gi,
        (match, beforeSrc, src, afterSrc) => {
            let processedSrc = src;

            // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n uploads
            if (src.startsWith('uploads/')) {
                processedSrc = getFullImageUrl(src);
            } else if (src.includes('uploads')) {
                // Tr√≠ch xu·∫•t ph·∫ßn uploads t·ª´ ƒë∆∞·ªùng d·∫´n
                const uploadsIndex = src.indexOf('uploads');
                processedSrc = getFullImageUrl(src.substring(uploadsIndex));
            }

            return `<img${beforeSrc}src="${processedSrc}"${afterSrc} style="max-width: 100%; height: auto;">`;
        }
    );
};

// Export th√™m m·ªôt h√†m t·ªïng h·ª£p ƒë·ªÉ s·ª≠ d·ª•ng d·ªÖ d√†ng
export const getProcessedQuillContent = (content, forEdit = false) => {
    if (!content) return '';

    if (forEdit) {
        return processQuillContentForEdit(content);
    } else {
        return processQuillContentWithUploads(content);
    }
};