import React, { useState, useEffect } from "react";
import {
    FaSearch,
    FaFilter,
    FaDownload,
    FaSync,
    FaEye,
    FaSort,
    FaChartLine
} from "react-icons/fa";
import OrderTable from "./OrderTable";
import OrderStats from "./OrderStats";
// import OrderFilters from "./OrderFilters";
import adminService from "../../../services/adminService";
import styles from './AdminOrder.module.scss';

function AdminOrder() {
    const [orders, setOrders] = useState([]);
    const [filteredOrders, setFilteredOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({
        status: 'all',
        paymentStatus: 'all',
        dateFrom: '',
        dateTo: '',
        sortBy: 'created_at',
        sortOrder: 'desc'
    });
    // const [showFilters, setShowFilters] = useState(false);

    const fetchOrders = async () => {
        setLoading(true);
        try {
            console.log('üîÑ Fetching orders via adminService...');
            const res = await adminService.getAllOrders();

            if (res?.data?.orders) {
                setOrders(res.data.orders);
                setFilteredOrders(res.data.orders);
                console.log('‚úÖ Orders loaded:', res.data.orders.length);
            } else {
                console.warn('‚ö†Ô∏è Unexpected response format:', res);
                setOrders([]);
                setFilteredOrders([]);
            }
        } catch (err) {
            console.error("‚ùå Error fetching orders:", err);
            setOrders([]);
            setFilteredOrders([]);
        } finally {
            setLoading(false);
        }
    };

    // Filter v√† search orders
    useEffect(() => {
        let filtered = [...orders];

        // Search filter
        if (searchTerm) {
            filtered = filtered.filter(order =>
                order.order_id.toString().includes(searchTerm) ||
                order.customer_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                order.customer_username?.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        // Status filter
        if (filters.status !== 'all') {
            filtered = filtered.filter(order => order.order_status === filters.status);
        }

        // Payment status filter
        if (filters.paymentStatus !== 'all') {
            filtered = filtered.filter(order => order.payment_status === filters.paymentStatus);
        }

        // Date range filter
        if (filters.dateFrom) {
            filtered = filtered.filter(order =>
                new Date(order.created_at) >= new Date(filters.dateFrom)
            );
        }
        if (filters.dateTo) {
            filtered = filtered.filter(order =>
                new Date(order.created_at) <= new Date(filters.dateTo + ' 23:59:59')
            );
        }

        // Sort
        filtered.sort((a, b) => {
            let aValue = a[filters.sortBy];
            let bValue = b[filters.sortBy];

            if (filters.sortBy === 'created_at') {
                aValue = new Date(aValue);
                bValue = new Date(bValue);
            } else if (filters.sortBy === 'total_price') {
                aValue = parseFloat(aValue || 0);
                bValue = parseFloat(bValue || 0);
            }

            if (filters.sortOrder === 'asc') {
                return aValue > bValue ? 1 : -1;
            } else {
                return aValue < bValue ? 1 : -1;
            }
        });

        setFilteredOrders(filtered);
    }, [orders, searchTerm, filters]);

    // H√†m ki·ªÉm tra ƒë∆°n h√†ng c√≥ t√≠nh v√†o doanh thu kh√¥ng
    const isValidRevenueOrder = (order) => {
        const isPaid = order.payment_status === 'ƒê√£ thanh to√°n' ||
            order.payment_status === 'ƒê√£ thanh to√°n v·ªõi QR';
        const isValidStatus = order.order_status === 'Ho√†n th√†nh' ||
            order.order_status === 'ƒê√£ giao' ||
            order.order_status === 'ƒêang giao h√†ng' ||
            order.order_status === 'ƒêang giao';
        return isPaid && isValidStatus;
    };

    // T√≠nh to√°n doanh thu t·ª´ danh s√°ch ƒë√£ l·ªçc
    const calculateRevenue = (orderList) => {
        const confirmedRevenue = orderList
            .filter(isValidRevenueOrder)
            .reduce((sum, order) => sum + parseFloat(order.total_price || 0), 0);

        const potentialRevenue = orderList
            .filter(order => order.order_status !== 'ƒê√£ h·ªßy')
            .reduce((sum, order) => sum + parseFloat(order.total_price || 0), 0);

        return { confirmedRevenue, potentialRevenue };
    };

    const handleExportOrders = () => {
        const { confirmedRevenue, potentialRevenue } = calculateRevenue(filteredOrders);

        const csvContent = "data:text/csv;charset=utf-8,"
            + "=== B√ÅO C√ÅO ƒê·ªúN H√ÄNG ===\n"
            + `Th·ªùi gian xu·∫•t: ${new Date().toLocaleString('vi-VN')}\n`
            + `T·ªïng s·ªë ƒë∆°n: ${filteredOrders.length}\n`
            + `Doanh thu x√°c nh·∫≠n: ${confirmedRevenue.toLocaleString('vi-VN')} VND\n`
            + `Doanh thu ti·ªÅm nƒÉng: ${potentialRevenue.toLocaleString('vi-VN')} VND\n`
            + "\nCHI TI·∫æT ƒê·ªúN H√ÄNG:\n"
            + "M√£ ƒêH,Kh√°ch h√†ng,Ng√†y ƒë·∫∑t,Tr·∫°ng th√°i,Thanh to√°n,T·ªïng ti·ªÅn,T√≠nh doanh thu\n"
            + filteredOrders.map(order => [
                order.order_id,
                `"${order.customer_name || order.customer_username || 'N/A'}"`,
                new Date(order.created_at).toLocaleDateString('vi-VN'),
                `"${order.order_status || 'N/A'}"`,
                `"${order.payment_status || 'N/A'}"`,
                parseFloat(order.total_price || 0).toLocaleString('vi-VN'),
                isValidRevenueOrder(order) ? 'C√≥' : 'Kh√¥ng'
            ].join(",")).join("\n");

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", `orders_report_${new Date().toISOString().split('T')[0]}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    useEffect(() => {
        fetchOrders();
    }, []);

    // T√≠nh to√°n th·ªëng k√™ hi·ªÉn th·ªã
    const { confirmedRevenue, potentialRevenue } = calculateRevenue(filteredOrders);

    return (
        <div className={styles.adminOrder}>
            <div className={styles.adminOrder__header}>
                <div className={styles.adminOrder__title}>
                    <h1>Qu·∫£n l√Ω ƒë∆°n h√†ng</h1>
                    <p>Qu·∫£n l√Ω v√† theo d√µi t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng</p>
                </div>

                <div className={styles.adminOrder__actions}>
                    {/* <button
                        onClick={() => setShowFilters(!showFilters)}
                        className={`${styles.adminOrder__btn} ${styles['adminOrder__btn--filter']}`}
                    >
                        <FaFilter />
                        B·ªô l·ªçc
                    </button> */}
                    {/* <button
                        onClick={handleExportOrders}
                        className={`${styles.adminOrder__btn} ${styles['adminOrder__btn--export']}`}
                    >
                        <FaDownload />
                        Xu·∫•t b√°o c√°o
                    </button> */}
                    <button
                        onClick={fetchOrders}
                        className={`${styles.adminOrder__btn} ${styles['adminOrder__btn--refresh']}`}
                        disabled={loading}
                    >
                        <FaSync className={loading ? styles.spinning : ''} />
                        L√†m m·ªõi
                    </button>
                </div>
            </div>

            {/* Order Statistics */}
            <OrderStats orders={orders} />

            {/* Search and Filters */}
            <div className={styles.adminOrder__controls}>
                <div className={styles.adminOrder__search}>
                    <FaSearch className={styles.adminOrder__searchIcon} />
                    <input
                        type="text"
                        placeholder="T√¨m ki·∫øm theo m√£ ƒë∆°n h√†ng, t√™n kh√°ch h√†ng..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className={styles.adminOrder__searchInput}
                    />
                </div>

                <div className={styles.adminOrder__quickFilters}>
                    <select
                        value={filters.status}
                        onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
                        className={styles.adminOrder__select}
                    >
                        <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                        <option value="Ch·ªù x√°c nh·∫≠n">Ch·ªù x√°c nh·∫≠n</option>
                        <option value="ƒê√£ x√°c nh·∫≠n">ƒê√£ x√°c nh·∫≠n</option>
                        <option value="ƒêang giao">ƒêang giao</option>
                        <option value="Ho√†n th√†nh">Ho√†n th√†nh</option>
                        <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
                    </select>

                    <select
                        value={filters.paymentStatus}
                        onChange={(e) => setFilters(prev => ({ ...prev, paymentStatus: e.target.value }))}
                        className={styles.adminOrder__select}
                    >
                        <option value="all">T·∫•t c·∫£ thanh to√°n</option>
                        <option value="Ch∆∞a thanh to√°n">Ch∆∞a thanh to√°n</option>
                        <option value="ƒê√£ thanh to√°n">ƒê√£ thanh to√°n</option>
                        <option value="ƒê√£ thanh to√°n v·ªõi QR">Thanh to√°n QR</option>
                    </select>

                    <select
                        value={filters.sortBy}
                        onChange={(e) => setFilters(prev => ({ ...prev, sortBy: e.target.value }))}
                        className={styles.adminOrder__select}
                    >
                        <option value="created_at">Ng√†y t·∫°o</option>
                        <option value="total_price">Gi√° tr·ªã</option>
                        <option value="order_status">Tr·∫°ng th√°i</option>
                    </select>

                    <button
                        onClick={() => setFilters(prev => ({
                            ...prev,
                            sortOrder: prev.sortOrder === 'asc' ? 'desc' : 'asc'
                        }))}
                        className={`${styles.adminOrder__btn} ${styles['adminOrder__btn--sort']}`}
                    >
                        <FaSort />
                        {filters.sortOrder === 'asc' ? 'TƒÉng d·∫ßn' : 'Gi·∫£m d·∫ßn'}
                    </button>
                </div>
            </div>

            {/* Advanced Filters */}
            {/* {showFilters && (
                <OrderFilters
                    filters={filters}
                    setFilters={setFilters}
                    onClose={() => setShowFilters(false)}
                />
            )} */}

            {/* Results Summary v·ªõi doanh thu ch√≠nh x√°c */}
            <div className={styles.adminOrder__summary}>
                <div className={styles.adminOrder__summaryItem}>
                    <span>Hi·ªÉn th·ªã:</span>
                    <strong>{filteredOrders.length}</strong>
                    <span>/ {orders.length} ƒë∆°n h√†ng</span>
                </div>
                <div className={styles.adminOrder__summaryItem}>
                    <span>Doanh thu x√°c nh·∫≠n:</span>
                    <strong style={{ color: '#10b981' }}>
                        {confirmedRevenue.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                    </strong>
                </div>
                <div className={styles.adminOrder__summaryItem}>
                    <span>Doanh thu ti·ªÅm nƒÉng:</span>
                    <strong style={{ color: '#f59e0b' }}>
                        {potentialRevenue.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}
                    </strong>
                </div>
                <div className={styles.adminOrder__summaryItem}>
                    <FaChartLine style={{ color: '#6366f1' }} />
                    <span>T·ª∑ l·ªá x√°c nh·∫≠n:</span>
                    <strong style={{ color: '#6366f1' }}>
                        {potentialRevenue > 0 ? ((confirmedRevenue / potentialRevenue) * 100).toFixed(1) : 0}%
                    </strong>
                </div>
            </div>

            {/* Order Table */}
            <div className={styles.adminOrder__table}>
                <OrderTable
                    orders={filteredOrders}
                    loading={loading}
                    onRefresh={fetchOrders}
                />
            </div>
        </div>
    );
}

export default AdminOrder;