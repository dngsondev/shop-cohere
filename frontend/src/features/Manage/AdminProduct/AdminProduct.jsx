import { useState, useEffect } from 'react';
import { FiPlus, FiX, FiGrid, FiList, FiFilter, FiDownload, FiSearch } from 'react-icons/fi';
import ProductForm from './ProductForm';
import ProductTable from './ProductTable';
import ProductCard from './ProductCard';
import ProductFilters from './ProductFilters';
import productService from "../../../services/productService";
import { consolidateProductData } from '../../../utils/productFormHelpers';
import { processQuillContentForEdit } from '../../../utils/quillUtils';
import styles from './AdminProduct.module.scss';
import QuickManageModal from './QuickManageModal';

import adminService from '../../../services/adminService';

function AdminProduct() {
    const [products, setProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [form, setForm] = useState({
        product_name: '',
        brand_id: '',
        category_id: '',
        material_id: '',
        target_id: '',
        discount: 0,
        description: '',
        productImages: [],
        size_ids: [],
        color_ids: []
    });

    const [originalFormData, setOriginalFormData] = useState(null);
    const [editId, setEditId] = useState(null);
    const [showForm, setShowForm] = useState(false);
    const [isLoading, setIsLoading] = useState(false);

    // New state for improved UI
    const [viewMode, setViewMode] = useState('table'); // 'table' or 'grid'
    const [searchTerm, setSearchTerm] = useState('');
    const [showFilters, setShowFilters] = useState(false);
    const [selectedProducts, setSelectedProducts] = useState([]);
    // const [sortBy, setSortBy] = useState('updated_at');
    // const [sortOrder, setSortOrder] = useState('desc');
    const [showBrandModal, setShowBrandModal] = useState(false);
    const [showCategoryModal, setShowCategoryModal] = useState(false);
    const [showColorModal, setShowColorModal] = useState(false);
    const [showMaterialModal, setShowMaterialModal] = useState(false);
    const [showTargetModal, setShowTargetModal] = useState(false);
    const [showSizeModal, setShowSizeModal] = useState(false);

    useEffect(() => {
        fetchProducts();
    }, []);

    useEffect(() => {
        filterProducts();
    }, [searchTerm, products]);

    const fetchProducts = async () => {
        try {
            setIsLoading(true);
            const response = await productService.getAllInfoProducts();
            setProducts(response.data);
            setFilteredProducts(response.data);
        } catch (error) {
            console.error('Error fetching products:', error);
        } finally {
            setIsLoading(false);
        }
    };

    const filterProducts = () => {
        let filtered = products;

        if (searchTerm) {
            filtered = filtered.filter(product =>
                product.product_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                product.brand_name?.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        setFilteredProducts(filtered);
    };

    // ‚ú® H√†m so s√°nh v√† tr√≠ch xu·∫•t ch·ªâ nh·ªØng thay ƒë·ªïi
    const getFormChanges = (originalData, currentData) => {
        const changes = {};

        // So s√°nh c√°c tr∆∞·ªùng c∆° b·∫£n
        const basicFields = ['product_name', 'brand_id', 'category_id', 'material_id', 'target_id', 'discount', 'description'];

        basicFields.forEach(field => {
            if (originalData[field] !== currentData[field]) {
                changes[field] = currentData[field];
                console.log(`üîÑ Changed ${field}: ${originalData[field]} ‚Üí ${currentData[field]}`);
            }
        });

        // So s√°nh m·∫£ng size_ids
        const originalSizes = JSON.stringify(originalData.size_ids?.sort() || []);
        const currentSizes = JSON.stringify(currentData.size_ids?.sort() || []);
        if (originalSizes !== currentSizes) {
            changes.size_ids = currentData.size_ids;
            console.log(`üîÑ Changed size_ids: ${originalSizes} ‚Üí ${currentSizes}`);
        }

        // So s√°nh m·∫£ng color_ids  
        const originalColors = JSON.stringify(originalData.color_ids?.sort() || []);
        const currentColors = JSON.stringify(currentData.color_ids?.sort() || []);
        if (originalColors !== currentColors) {
            changes.color_ids = currentData.color_ids;
            console.log(`üîÑ Changed color_ids: ${originalColors} ‚Üí ${currentColors}`);
        }

        // So s√°nh productImages
        const originalImages = JSON.stringify(originalData.productImages?.sort() || []);
        const currentImages = JSON.stringify(currentData.productImages?.sort() || []);
        if (originalImages !== currentImages) {
            changes.productImages = currentData.productImages;
            console.log(`üîÑ Changed productImages: ${originalImages} ‚Üí ${currentImages}`);
        }

        // So s√°nh variants n·∫øu c√≥
        if (currentData.productVariants) {
            changes.variants = currentData.productVariants;
            console.log(`üîÑ Variants data included`);
        }

        return changes;
    };

    const handleSubmit = async (formData, productId) => {
        const requiredFields = ['product_name', 'brand_id', 'category_id', 'material_id'];
        let hasEmptyFields = false;

        for (const field of requiredFields) {
            if (!formData.get(field)) {
                console.error(`Missing required field: ${field}`);
                hasEmptyFields = true;
            }
        }

        if (hasEmptyFields) {
            alert('Please fill all required fields before submitting');
            return;
        }

        // Parse variants t·ª´ formData
        let variants = [];
        try {
            const variantsString = formData.get('variants');
            if (variantsString) {
                variants = JSON.parse(variantsString);
            }
        } catch (error) {
            console.error('Error parsing variants:', error);
            alert('Invalid variants data');
            return;
        }

        // Extract unique size_ids v√† color_ids t·ª´ variants
        const sizeIds = [...new Set(variants.map(v => parseInt(v.size_id)))].filter(id => !isNaN(id));
        const colorIds = [...new Set(variants.map(v => parseInt(v.color_id)))].filter(id => !isNaN(id));

        // Validate variants
        if (variants.length === 0) {
            alert('Please add at least one variant');
            return;
        }

        if (sizeIds.length === 0 || colorIds.length === 0) {
            alert('Invalid variant data: missing size or color IDs');
            return;
        }

        // ‚ú® N·∫øu ƒëang edit, ch·ªâ g·ª≠i nh·ªØng thay ƒë·ªïi
        if (productId && originalFormData) {
            // T·∫°o object ch·ª©a d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ formData
            const currentFormObject = {
                product_name: formData.get('product_name'),
                brand_id: formData.get('brand_id'),
                category_id: formData.get('category_id'),
                material_id: formData.get('material_id'),
                target_id: formData.get('target_id'),
                discount: parseFloat(formData.get('discount')) || 0,
                description: formData.get('description'),
                size_ids: sizeIds,
                color_ids: colorIds,
                productImages: JSON.parse(formData.get('existingImages') || '[]'),
                productVariants: variants
            };

            // So s√°nh v·ªõi d·ªØ li·ªáu ban ƒë·∫ßu
            const changes = getFormChanges(originalFormData, currentFormObject);

            console.log('üìä Detected changes:', changes);

            // N·∫øu kh√¥ng c√≥ thay ƒë·ªïi g√¨
            if (Object.keys(changes).length === 0) {
                alert('Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ c·∫≠p nh·∫≠t!');
                return;
            }

            // T·∫°o FormData m·ªõi ch·ªâ v·ªõi nh·ªØng thay ƒë·ªïi
            const changesFormData = new FormData();

            // Th√™m product_id ƒë·ªÉ backend bi·∫øt ƒëang update
            changesFormData.append('product_id', productId);

            // Th√™m nh·ªØng tr∆∞·ªùng ƒë√£ thay ƒë·ªïi
            Object.entries(changes).forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    changesFormData.append(key, JSON.stringify(value));
                } else {
                    changesFormData.append(key, value);
                }
            });

            // N·∫øu c√≥ file ·∫£nh m·ªõi t·ª´ form g·ªëc, th√™m v√†o
            const files = formData.getAll('productImages');
            if (files && files.length > 0 && files[0].size > 0) {
                files.forEach(file => {
                    changesFormData.append('productImages', file);
                });
                console.log('üìé Added new image files:', files.length);
            }

            console.log('üì¶ Changes FormData contents:');
            for (let [key, value] of changesFormData.entries()) {
                console.log(`  ${key}:`, typeof value === 'object' ? value.name || '[Object]' : value);
            }

            formData = changesFormData;
        } else {
            // Cho tr∆∞·ªùng h·ª£p t·∫°o m·ªõi, gi·ªØ nguy√™n logic c≈©
            formData.set('size_ids', JSON.stringify(sizeIds));
            formData.set('color_ids', JSON.stringify(colorIds));
        }

        setIsLoading(true);
        try {
            let response;

            if (productId) {
                // Update existing product v·ªõi ch·ªâ nh·ªØng thay ƒë·ªïi
                response = await productService.updateProduct(productId, formData);
                console.log('‚úÖ Product updated successfully:', response?.data);
            } else {
                // Add new product
                response = await productService.createProduct(formData);
                console.log('‚úÖ Product added successfully:', response.data);
            }

            // Refresh the product list
            const productsResponse = await productService.getAllInfoProducts();
            setProducts(productsResponse.data);

            // ‚ú® Reset states
            setEditId(null);
            setOriginalFormData(null);
            setShowForm(false);

            alert(productId ? 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!' : 'S·∫£n ph·∫©m m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!');
        } catch (error) {
            console.error('‚ùå Error saving product:', error);
            alert(`L·ªói: ${error.response?.data?.message || 'Kh√¥ng th·ªÉ l∆∞u s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.'}`);
        } finally {
            setIsLoading(false);
        }
    };

    const handleEdit = async (product) => {
        console.log("üè† ===== EDIT START =====");
        console.log("üè† Selected product:", product);

        try {
            setIsLoading(true);

            // ‚ú® Reset states tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            setOriginalFormData(null);
            setEditId(null);

            // ‚ú® S·ª≠a l·∫°i c√°ch g·ªçi API ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng l·ªói
            const [allProductsResponse, allProductImagesResponse] = await Promise.allSettled([
                productService.getAllInfoProducts(),
                productService.getAllProductImages(product.product_id)
            ]);

            let allProducts = [];
            if (allProductsResponse.status === 'fulfilled') {
                allProducts = allProductsResponse.value.data || [];
            } else {
                console.error("Error fetching products:", allProductsResponse.reason);
                throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m");
            }

            let allProductImages = [];
            if (allProductImagesResponse.status === 'fulfilled') {
                const imageResponse = allProductImagesResponse.value;
                console.log("üîç Image response structure:", imageResponse);

                // ‚ú® ƒê∆°n gi·∫£n h√≥a logic - Truy c·∫≠p nested data
                const responseData = imageResponse.data; // Backend response: {success: true, data: [...]}

                if (responseData && responseData.success && Array.isArray(responseData.data)) {
                    allProductImages = responseData.data;
                    console.log("‚úÖ Successfully extracted images:", allProductImages);
                } else {
                    console.warn("‚ö†Ô∏è Unexpected response format:", responseData);
                    allProductImages = [];
                }
            } else {
                console.warn("Warning: Could not fetch product images:", allProductImagesResponse.reason);
                allProductImages = [];
            }

            console.log("üè† All products fetched:", allProducts.length);
            console.log("üè† Product images fetched:", allProductImages.length);
            console.log("üîç Product images final data:", allProductImages);

            // ‚ú® Truy·ªÅn allProductImages v√†o consolidateProductData
            const consolidatedData = consolidateProductData(allProducts, product.product_id, allProductImages);
            console.log("üè† Consolidated data from helper:", consolidatedData);

            if (!consolidatedData) {
                throw new Error("Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu s·∫£n ph·∫©m");
            }

            // X·ª≠ l√Ω description ƒë·ªÉ c√≥ th·ªÉ edit
            const editableDescription = consolidatedData.description
                ? processQuillContentForEdit(consolidatedData.description)
                : '';

            const formData = {
                ...consolidatedData,
                description: editableDescription,
                productImages: allProductImages.length > 0 ? allProductImages : consolidatedData.productImages
            };

            console.log("üè† FINAL FORM DATA before setting:", formData);

            // ‚ú® Set form data v√† editId
            setForm(formData);
            setEditId(product.product_id);
            setShowForm(true);

            console.log("üè† ===== EDIT COMPLETED (waiting for variants to load) =====");

        } catch (error) {
            console.error('‚ùå EDIT ERROR:', error);
            alert(`L·ªói khi t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m: ${error.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async (id) => {
        // ‚ú® C·∫£i thi·ªán UX v·ªõi confirm dialog v√† loading state
        const productToDelete = products.find(p => p.product_id === id);
        const productName = productToDelete?.product_name || `ID ${id}`;

        if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m "${productName}"?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† s·∫Ω x√≥a:\n- T·∫•t c·∫£ variants c·ªßa s·∫£n ph·∫©m\n- T·∫•t c·∫£ ·∫£nh s·∫£n ph·∫©m\n- D·ªØ li·ªáu s·∫£n ph·∫©m`)) {
            return;
        }

        setIsLoading(true);

        try {
            console.log('üóëÔ∏è Deleting product:', id);

            const response = await productService.deleteProduct(id);
            console.log('‚úÖ Delete response:', response.data);

            if (response.data.success) {
                // X√≥a kh·ªèi state ngay l·∫≠p t·ª©c ƒë·ªÉ UX m∆∞·ª£t m√†
                setProducts((prev) => prev.filter((p) => p.product_id !== id));

                // N·∫øu ƒëang edit s·∫£n ph·∫©m n√†y th√¨ ƒë√≥ng form
                if (editId === id) {
                    setEditId(null);
                    setOriginalFormData(null);
                    setShowForm(false);
                }

                alert(`S·∫£n ph·∫©m "${productName}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`);

                // Refresh danh s√°ch ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô v·ªõi server
                try {
                    const refreshResponse = await productService.getAllInfoProducts();
                    setProducts(refreshResponse.data);
                    console.log('‚úÖ Product list refreshed after deletion');
                } catch (refreshError) {
                    console.warn('‚ö†Ô∏è Failed to refresh product list:', refreshError);
                    // Kh√¥ng hi·ªÉn th·ªã l·ªói n√†y cho user v√¨ delete ƒë√£ th√†nh c√¥ng
                }
            } else {
                throw new Error(response.data.message || 'Delete failed');
            }

        } catch (error) {
            console.error('‚ùå Error deleting product:', error);

            let errorMessage = 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.';

            if (error.response?.status === 404) {
                errorMessage = 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c x√≥a.';
            } else if (error.response?.status === 409) {
                errorMessage = 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m v√¨ c√≥ d·ªØ li·ªáu li√™n quan.';
            } else if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            }

            alert(`L·ªói: ${errorMessage}`);

            // Refresh l·∫°i danh s√°ch ƒë·ªÉ ƒë·∫£m b·∫£o state ƒë√∫ng
            try {
                const refreshResponse = await productService.getAllInfoProducts();
                setProducts(refreshResponse.data);
            } catch (refreshError) {
                console.error('‚ùå Failed to refresh products after delete error:', refreshError);
            }
        } finally {
            setIsLoading(false);
        }
    };

    const handleBulkDelete = async () => {
        if (selectedProducts.length === 0) return;

        if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${selectedProducts.length} s·∫£n ph·∫©m?`)) {
            try {
                setIsLoading(true);
                await Promise.all(selectedProducts.map(id => productService.deleteProduct(id)));
                await fetchProducts();
                setSelectedProducts([]);
            } catch (error) {
                console.error('Error bulk deleting products:', error);
            } finally {
                setIsLoading(false);
            }
        }
    };

    const handleExport = () => {
        // Export products to CSV
        const csvContent = [
            ['ID', 'T√™n s·∫£n ph·∫©m', 'H√£ng', 'Gi√°', 'Gi·∫£m gi√°', 'Tr·∫°ng th√°i'],
            ...filteredProducts.map(p => [
                p.product_id,
                p.product_name,
                p.brand_name,
                p.price,
                p.discount,
                p.quantity > 0 ? 'C√≤n h√†ng' : 'H·∫øt h√†ng'
            ])
        ].map(row => row.join(',')).join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `products_${new Date().toISOString().split('T')[0]}.csv`;
        a.click();
    };

    return (
        <div className={styles.adminProduct}>
            {/* Header Section */}
            <div className={styles.adminProduct__header}>
                <div className={styles.adminProduct__headerLeft}>
                    <h1 className={styles.adminProduct__title}>
                        Qu·∫£n l√Ω s·∫£n ph·∫©m
                        <span className={styles.adminProduct__count}>
                            ({filteredProducts.length})
                        </span>
                    </h1>
                    <p className={styles.adminProduct__subtitle}>
                        Qu·∫£n l√Ω to√†n b·ªô s·∫£n ph·∫©m trong c·ª≠a h√†ng
                    </p>
                </div>

                <div className={styles.adminProduct__headerRight}>
                    {!showForm && (
                        <>
                            <button
                                onClick={() => {
                                    setForm({
                                        product_name: '',
                                        brand_id: '',
                                        category_id: '',
                                        material_id: '',
                                        target_id: '',
                                        discount: 0,
                                        description: '',
                                        productImages: [],
                                        size_ids: [],
                                        color_ids: []
                                    });
                                    setEditId(null);
                                    setOriginalFormData(null);
                                    setShowForm(true);
                                }}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--primary']}`}
                            >
                                <FiPlus />
                                Th√™m s·∫£n ph·∫©m
                            </button>
                            <button
                                onClick={() => {
                                    setShowBrandModal(true);
                                    console.log('setShowBrandModal(true)');
                                }}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']}`}
                            >
                                Th∆∞∆°ng hi·ªáu
                            </button>
                            <button
                                onClick={() => setShowCategoryModal(true)}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']}`}
                            >
                                Danh m·ª•c
                            </button>
                            <button
                                onClick={() => setShowColorModal(true)}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']}`}
                            >
                                M√†u s·∫Øc
                            </button>
                            <button
                                onClick={() => setShowMaterialModal(true)}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']}`}
                            >
                                Ch·∫•t li·ªáu
                            </button>
                            <button
                                onClick={() => setShowTargetModal(true)}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']}`}
                            >
                                ƒê·ªëi t∆∞·ª£ng
                            </button>
                            <button
                                onClick={() => setShowSizeModal(true)}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']}`}
                            >
                                K√≠ch th∆∞·ªõc
                            </button>
                        </>
                    )}
                </div>
            </div>

            {showForm ? (
                <div className={styles.adminProduct__formContainer}>
                    <div className={styles.adminProduct__formHeader}>
                        <h2 className={styles.adminProduct__formTitle}>
                            {editId ? 'Ch·ªânh s·ª≠a s·∫£n ph·∫©m' : 'Th√™m s·∫£n ph·∫©m m·ªõi'}
                        </h2>
                        <button
                            onClick={() => {
                                setShowForm(false);
                                setOriginalFormData(null);
                            }}
                            className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--ghost']}`}
                        >
                            <FiX />
                            ƒê√≥ng
                        </button>
                    </div>

                    <div className={styles.adminProduct__formContent}>
                        <ProductForm
                            form={form}
                            setForm={setForm}
                            handleSubmit={handleSubmit}
                            editId={editId}
                            originalFormData={originalFormData}
                            setOriginalFormData={setOriginalFormData}
                        />
                    </div>
                </div>
            ) : (
                <div className={styles.adminProduct__content}>
                    {/* Toolbar */}
                    <div className={styles.adminProduct__toolbar}>
                        <div className={styles.adminProduct__toolbarLeft}>
                            {/* Search */}
                            <div className={styles.adminProduct__search}>
                                <FiSearch className={styles.adminProduct__searchIcon} />
                                <input
                                    type="text"
                                    placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className={styles.adminProduct__searchInput}
                                />
                            </div>

                            {/* Filters */}
                            <button
                                onClick={() => setShowFilters(!showFilters)}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']} ${showFilters ? styles.active : ''}`}
                            >
                                <FiFilter />
                                B·ªô l·ªçc
                            </button>
                        </div>

                        <div className={styles.adminProduct__toolbarRight}>
                            {/* Bulk Actions */}
                            {selectedProducts.length > 0 && (
                                <div className={styles.adminProduct__bulkActions}>
                                    <span className={styles.adminProduct__bulkCount}>
                                        ƒê√£ ch·ªçn {selectedProducts.length}
                                    </span>
                                    <button
                                        onClick={handleBulkDelete}
                                        className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--danger']}`}
                                    >
                                        X√≥a ({selectedProducts.length})
                                    </button>
                                </div>
                            )}

                            {/* Export */}
                            <button
                                onClick={handleExport}
                                className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--outline']}`}
                            >
                                <FiDownload />
                                Xu·∫•t Excel
                            </button>

                            {/* View Mode Toggle */}
                            <div className={styles.adminProduct__viewToggle}>
                                <button
                                    onClick={() => setViewMode('table')}
                                    className={`${styles.adminProduct__viewBtn} ${viewMode === 'table' ? styles.active : ''}`}
                                >
                                    <FiList />
                                </button>
                                <button
                                    onClick={() => setViewMode('grid')}
                                    className={`${styles.adminProduct__viewBtn} ${viewMode === 'grid' ? styles.active : ''}`}
                                >
                                    <FiGrid />
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* Filters Panel */}
                    <ProductFilters
                        isVisible={showFilters}
                        products={products}
                        onFilter={setFilteredProducts}
                        originalProducts={products}
                    />

                    {/* Product List */}
                    <div className={styles.adminProduct__list}>
                        {viewMode === 'table' ? (
                            <ProductTable
                                products={filteredProducts}
                                onEdit={handleEdit}
                                onDelete={handleDelete}
                                isLoading={isLoading}
                                selectedProducts={selectedProducts}
                                onSelectProducts={setSelectedProducts}
                            />
                        ) : (
                            <div className={styles.adminProduct__grid}>
                                {filteredProducts.map((product) => (
                                    <ProductCard
                                        key={product.product_id}
                                        product={product}
                                        onEdit={handleEdit}
                                        onDelete={handleDelete}
                                        isSelected={selectedProducts.includes(product.product_id)}
                                        onSelect={(selected) => {
                                            if (selected) {
                                                setSelectedProducts([...selectedProducts, product.product_id]);
                                            } else {
                                                setSelectedProducts(selectedProducts.filter(id => id !== product.product_id));
                                            }
                                        }}
                                    />
                                ))}
                            </div>
                        )}
                    </div>

                    {/* Empty State */}
                    {filteredProducts.length === 0 && !isLoading && (
                        <div className={styles.adminProduct__empty}>
                            <div className={styles.adminProduct__emptyIcon}>üì¶</div>
                            <h3 className={styles.adminProduct__emptyTitle}>
                                {searchTerm ? 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' : 'Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o'}
                            </h3>
                            <p className={styles.adminProduct__emptyText}>
                                {searchTerm
                                    ? 'Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c'
                                    : 'H√£y th√™m s·∫£n ph·∫©m ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu'
                                }
                            </p>
                            {!searchTerm && (
                                <button
                                    onClick={() => setShowForm(true)}
                                    className={`${styles.adminProduct__btn} ${styles['adminProduct__btn--primary']}`}
                                >
                                    <FiPlus />
                                    Th√™m s·∫£n ph·∫©m ƒë·∫ßu ti√™n
                                </button>
                            )}
                        </div>
                    )}
                </div>
            )}

            {/* Loading Overlay */}
            {isLoading && (
                <div className={styles.adminProduct__loading}>
                    <div className={styles.adminProduct__spinner}></div>
                    <p>ƒêang t·∫£i...</p>
                </div>
            )}

            {/* Quick Manage Modal for Brands - New Feature */}
            <QuickManageModal
                type="brand"
                isOpen={showBrandModal}
                onClose={() => setShowBrandModal(false)}
                fetchApi={adminService.getAllBrands}
                createApi={adminService.createBrand}
                updateApi={adminService.updateBrand}
                deleteApi={adminService.deleteBrand}
            />

            {/* Quick Manage Modal for Categories - New Feature */}
            <QuickManageModal
                type="category"
                isOpen={showCategoryModal}
                onClose={() => setShowCategoryModal(false)}
                fetchApi={adminService.getAllCategories}
                createApi={adminService.createCategory}
                updateApi={adminService.updateCategory}
                deleteApi={adminService.deleteCategory}
            />

            {/* Quick Manage Modal for Colors - New Feature */}
            <QuickManageModal
                type="color"
                isOpen={showColorModal}
                onClose={() => setShowColorModal(false)}
                fetchApi={adminService.getAllColors}
                createApi={adminService.createColor}
                updateApi={adminService.updateColor}
                deleteApi={adminService.deleteColor}
            />

            {/* Quick Manage Modal for Materials - New Feature */}
            <QuickManageModal
                type="material"
                isOpen={showMaterialModal}
                onClose={() => setShowMaterialModal(false)}
                fetchApi={adminService.getAllMaterials}
                createApi={adminService.createMaterial}
                updateApi={adminService.updateMaterial}
                deleteApi={adminService.deleteMaterial}
            />

            {/* Quick Manage Modal for Targets - New Feature */}
            <QuickManageModal
                type="target"
                isOpen={showTargetModal}
                onClose={() => setShowTargetModal(false)}
                fetchApi={adminService.getAllTargets}
                createApi={adminService.createTarget}
                updateApi={adminService.updateTarget}
                deleteApi={adminService.deleteTarget}
            />

            {/* Quick Manage Modal for Sizes - New Feature */}
            <QuickManageModal
                type="size"
                isOpen={showSizeModal}
                onClose={() => setShowSizeModal(false)}
                fetchApi={adminService.getAllSizes}
                createApi={adminService.createSize}
                updateApi={adminService.updateSize}
                deleteApi={adminService.deleteSize}
            />
        </div>
    );
}

export default AdminProduct;
