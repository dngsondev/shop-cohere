import * as chatModels from '../models/chatModels.js';

// T·∫°o ho·∫∑c l·∫•y ph√≤ng chat
export const createOrGetRoom = async (req, res) => {
    try {
        const { customerId } = req.body;

        if (!customerId) {
            return res.status(400).json({
                success: false,
                message: 'Customer ID is required'
            });
        }

        console.log(`üîç Finding or creating room for customer: ${customerId}`);

        // T√¨m ho·∫∑c t·∫°o room
        const room = await chatModels.findOrCreateRoom(customerId);

        res.json({
            success: true,
            room: room,
            message: room.room_id ? 'Room found' : 'Room created'
        });

    } catch (error) {
        console.error('‚ùå Error in createOrGetRoom:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Server error'
        });
    }
};

// L·∫•y danh s√°ch ph√≤ng chat (Admin)
export const getChatRooms = async (req, res) => {
    try {
        const rooms = await chatModels.getAllChatRooms();

        res.json({
            success: true,
            rooms: rooms.map(room => ({
                id: room.room_id,
                room_id: room.room_id,
                customer_id: room.customer_id,
                customer_name: room.customer_name || room.customer_username,
                customer_email: room.customer_email,
                admin_id: room.admin_id,
                staff_name: room.admin_name,
                status: room.status,
                last_message: room.last_message,
                last_message_at: room.last_message_at,
                unread_count: room.unread_count || 0,
                created_at: room.created_at,
                closed_at: room.closed_at
            }))
        });
    } catch (error) {
        console.error('Error in getChatRooms:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
};

// L·∫•y messages c·ªßa room
export const getMessages = async (req, res) => {
    try {
        const { roomId } = req.params;

        if (!roomId) {
            return res.status(400).json({
                success: false,
                message: 'Room ID is required'
            });
        }

        console.log(`üîç Getting messages for room: ${roomId}`);

        // Ki·ªÉm tra room t·ªìn t·∫°i
        const room = await chatModels.getRoomDetails(roomId);

        // L·∫•y messages
        const messages = await chatModels.getRoomMessages(roomId);

        res.json({
            success: true,
            messages: messages,
            room: room,
            total: messages.length
        });

    } catch (error) {
        console.error('‚ùå Error getting messages:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Server error'
        });
    }
};

// G·ª≠i tin nh·∫Øn
export const sendMessage = async (req, res) => {
    try {
        const { roomId, senderType, senderId, message } = req.body;

        if (!roomId || !senderType || !senderId || !message) {
            return res.status(400).json({
                success: false,
                message: 'All fields are required'
            });
        }

        console.log(`üì§ Sending message:`, {
            roomId,
            senderType,
            senderId,
            messageLength: message.length
        });

        // Ki·ªÉm tra room t·ªìn t·∫°i v√† kh√¥ng b·ªã ƒë√≥ng
        const room = await chatModels.getRoomDetails(roomId);

        if (!room) {
            return res.status(404).json({
                success: false,
                message: 'Room not found'
            });
        }

        if (room.status === 'closed') {
            return res.status(400).json({
                success: false,
                message: 'Cannot send message to closed room'
            });
        }

        // Insert message
        const newMessage = await chatModels.insertMessage(roomId, senderType, senderId, message.trim());

        res.json({
            success: true,
            message: newMessage
        });

    } catch (error) {
        console.error('‚ùå Error sending message:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Server error'
        });
    }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i room
export const updateRoomStatus = async (req, res) => {
    try {
        const { roomId } = req.params;
        const { status, adminId } = req.body;

        if (!roomId || !status) {
            return res.status(400).json({
                success: false,
                message: 'Room ID and status are required'
            });
        }

        console.log(`üîÑ Updating room ${roomId} status to: ${status}`);

        // Validate status
        const validStatuses = ['pending', 'active', 'closed'];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({
                success: false,
                message: 'Invalid status. Must be one of: ' + validStatuses.join(', ')
            });
        }

        // X·ª≠ l√Ω logic ƒë·∫∑c bi·ªát cho t·ª´ng status
        if (status === 'active' && adminId) {
            // Assign room to admin khi chuy·ªÉn sang active
            await chatModels.assignRoomToAdmin(roomId, adminId);
            console.log(`üë§ Room ${roomId} assigned to admin ${adminId}`);
        } else if (status === 'closed') {
            // ƒê√≥ng room
            await chatModels.closeRoom(roomId, adminId);
            console.log(`üîí Room ${roomId} closed by admin ${adminId}`);
        } else {
            // Ch·ªâ update status th√¥ng th∆∞·ªùng
            await chatModels.updateRoomStatus(roomId, status);
        }

        // L·∫•y th√¥ng tin room ƒë√£ update
        const updatedRoom = await chatModels.getRoomDetails(roomId);

        res.json({
            success: true,
            room: updatedRoom,
            message: `Room status updated to ${status}`,
            previous_status: req.body.previousStatus || 'unknown'
        });

    } catch (error) {
        console.error('‚ùå Error updating room status:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Server error'
        });
    }
};

// Assign ph√≤ng chat cho admin
export const assignRoom = async (req, res) => {
    try {
        const { roomId, adminId } = req.body;

        if (!roomId || !adminId) {
            return res.status(400).json({
                success: false,
                message: 'Room ID and Admin ID are required'
            });
        }

        console.log(`üîÑ Assigning room ${roomId} to admin ${adminId}`);

        // Ki·ªÉm tra admin t·ªìn t·∫°i
        const adminInfo = await chatModels.getAdminInfo(adminId);

        // Assign room
        const updatedRoom = await chatModels.assignRoomToAdmin(roomId, adminId);

        res.json({
            success: true,
            message: `Ph√≤ng chat ƒë√£ ƒë∆∞·ª£c giao cho ${adminInfo.name}`,
            room: updatedRoom,
            admin: adminInfo
        });
    } catch (error) {
        console.error('Error assigning room:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Server error'
        });
    }
};

// ƒê√≥ng ph√≤ng chat
export const closeRoom = async (req, res) => {
    try {
        const { roomId } = req.params;
        const { adminId } = req.body;

        if (!roomId) {
            return res.status(400).json({
                success: false,
                message: 'Room ID is required'
            });
        }

        console.log(`üîÑ Closing room ${roomId} by admin ${adminId}`);

        await chatModels.closeRoom(roomId, adminId);

        res.json({
            success: true,
            message: 'Ph√≤ng chat ƒë√£ ƒë∆∞·ª£c ƒë√≥ng'
        });
    } catch (error) {
        console.error('Error closing room:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Server error'
        });
    }
};

// L·∫•y danh s√°ch admin
export const getAdmins = async (req, res) => {
    try {
        const admins = await chatModels.getOnlineAdmins();

        res.json({
            success: true,
            admins: admins
        });
    } catch (error) {
        console.error('Error getting admins:', error);
        res.status(500).json({
            success: false,
            message: 'Server error',
            error: error.message
        });
    }
};

// L·∫•y tr·∫°ng th√°i customer
export const getCustomerStatus = async (req, res) => {
    try {
        const { customerId } = req.params;

        if (!customerId) {
            return res.status(400).json({
                success: false,
                message: 'Customer ID is required'
            });
        }

        console.log(`üîç Getting status for customer: ${customerId}`);
        const customerStatus = await chatModels.getCustomerStatus(customerId);

        res.json({
            success: true,
            status: {
                isOnline: false, // M·∫∑c ƒë·ªãnh offline
                lastSeen: null,
                isTyping: false,
                customer: {
                    id: customerStatus.customer_id,
                    name: customerStatus.name || 'Kh√°ch h√†ng',
                    email: customerStatus.email,
                    username: customerStatus.username,
                    avatar: customerStatus.avatar,
                    joinedDate: customerStatus.joined_date
                }
            }
        });
    } catch (error) {
        console.error('Error in getCustomerStatus:', error);
        res.status(500).json({
            success: false,
            message: 'Server error',
            error: error.message
        });
    }
};

// L·∫•y tr·∫°ng th√°i staff c·ªßa ph√≤ng chat
export const getStaffStatus = async (req, res) => {
    try {
        const { roomId } = req.params;

        if (!roomId) {
            return res.status(400).json({
                success: false,
                message: 'Room ID is required'
            });
        }

        const room = await chatModels.getRoomDetails(roomId);

        res.json({
            success: true,
            status: {
                isOnline: room.admin_id ? true : false,
                assignedTo: room.admin_name || null,
                adminId: room.admin_id || null,
                adminUsername: room.admin_username || null,
                roomStatus: room.status || 'pending'
            }
        });
    } catch (error) {
        console.error('Error in getStaffStatus:', error);
        res.status(500).json({
            success: false,
            message: 'Server error',
            error: error.message
        });
    }
};

// Update user activity - Gi·∫£ l·∫≠p ƒë·ªÉ t∆∞∆°ng th√≠ch
export const updateActivity = async (req, res) => {
    try {
        const { userId, userType } = req.body;

        console.log(`üìä Activity updated for ${userType}: ${userId}`);

        res.json({
            success: true,
            message: 'Activity updated'
        });
    } catch (error) {
        console.error('Error updating activity:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
};

// L·∫•y room hi·ªán t·∫°i c·ªßa customer
export const getCurrentRoom = async (req, res) => {
    try {
        const { customerId } = req.params;

        if (!customerId) {
            return res.status(400).json({
                success: false,
                message: 'Customer ID is required'
            });
        }

        const room = await chatModels.getCurrentCustomerRoom(customerId);

        res.json({
            success: true,
            room: room,
            hasActiveRoom: !!room
        });
    } catch (error) {
        console.error('Error in getCurrentRoom:', error);
        res.status(500).json({
            success: false,
            message: 'Server error',
            error: error.message
        });
    }
};

// Endpoint ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i online - Gi·∫£ l·∫≠p
export const getOnlineStatus = async (req, res) => {
    try {
        const { userId, userType } = req.params;

        // Tr·∫£ v·ªÅ offline cho t·∫•t c·∫£ users v√¨ kh√¥ng c√≥ b·∫£ng user_sessions
        res.json({
            success: true,
            online_status: {
                isOnline: false,
                lastActivity: null,
                minutesOffline: null
            }
        });

    } catch (error) {
        console.error('‚ùå Error getting online status:', error);
        res.status(500).json({
            success: false,
            message: error.message || 'Server error'
        });
    }
};