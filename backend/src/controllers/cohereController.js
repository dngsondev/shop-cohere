import cohere from '../config/cohereConfig.js';
import { getInforToCohere, getIdProducts, getProductsByIdForCohere } from '../models/productModel.js';
import { getCommand } from '../models/adminModels.js';
import { getInforToSuggestQuestions } from '../models/cohereModels.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import striptags from 'striptags';

// B·ªô nh·ªõ l∆∞u h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥
let chatHistory = [];

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cache ƒë·ªÉ l∆∞u embeddings c·ªßa s·∫£n ph·∫©m (tr√°nh t√≠nh to√°n l·∫°i nhi·ªÅu l·∫ßn)
let productEmbeddingsCache = new Map();

// H√†m ƒë·ªçc n·ªôi dung file txt/docx
async function convertFileToText(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    if (ext === '.txt') {
        return fs.promises.readFile(filePath, 'utf8');
    }
    if (ext === '.docx') {
        try {
            const mammoth = await import('mammoth');
            const buffer = await fs.promises.readFile(filePath);
            const result = await mammoth.convertToHtml({ buffer });
            return result.value.replace(/<[^>]+>/g, '');
        } catch (err) {
            return '';
        }
    }
    return '';
}

// H√†m t√≠nh cosine similarity
function cosineSimilarity(vecA, vecB) {
    if (vecA.length !== vecB.length) return 0;

    let dotProduct = 0;
    let normA = 0;
    let normB = 0;

    for (let i = 0; i < vecA.length; i++) {
        dotProduct += vecA[i] * vecB[i];
        normA += vecA[i] * vecA[i];
        normB += vecB[i] * vecB[i];
    }

    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
}

// H√†m t·∫°o embedding cho s·∫£n ph·∫©m
async function createProductEmbedding(product) {
    const productText = `${product.product_name} ${product.brand} ${product.category} ${product.material} ${striptags(product.description || '')}`;

    // console.log("Product text:", productText);

    // console.log("Product text:", productText.length);

    try {
        const response = await cohere.embed({
            texts: [productText],
            model: 'embed-multilingual-v3.0',
            input_type: 'search_document' // Th√™m d√≤ng n√†y
        });
        // console.log("Cohere response:", response);

        // console.log("Cohere response:", response.embeddings[0].length);

        return response.embeddings[0];
    } catch (error) {
        console.error('L·ªói khi t·∫°o embedding cho s·∫£n ph·∫©m:', product.product_id, error);
        return null;
    }

}

// H√†m t√¨m ki·∫øm s·∫£n ph·∫©m li√™n quan b·∫±ng semantic search
async function searchRelevantProducts(query, allProducts, limit = 8) {
    try {
        console.log(`üîç B·∫Øt ƒë·∫ßu semantic search v·ªõi query: "${query}"`);

        // 1. T·∫°o embedding cho query
        const queryEmbeddingResponse = await cohere.embed({
            texts: [query],
            model: 'embed-multilingual-v3.0',
            input_type: 'search_query' // Th√™m d√≤ng n√†y
        });
        const queryEmbedding = queryEmbeddingResponse.embeddings[0];

        // 2. Group products ƒë·ªÉ tr√°nh duplicate
        const groupedProducts = groupProducts(allProducts);
        console.log(`üì¶ ƒê√£ group ${allProducts.length} s·∫£n ph·∫©m th√†nh ${groupedProducts.length} s·∫£n ph·∫©m unique`);

        // 3. T·∫°o ho·∫∑c l·∫•y embeddings cho t·ª´ng s·∫£n ph·∫©m
        const productSimilarities = [];

        for (const product of groupedProducts) {
            let productEmbedding;

            // Ki·ªÉm tra cache
            if (productEmbeddingsCache.has(product.product_id)) {
                productEmbedding = productEmbeddingsCache.get(product.product_id);
            } else {
                // T·∫°o embedding m·ªõi v√† cache
                productEmbedding = await createProductEmbedding(product);
                if (productEmbedding) {
                    productEmbeddingsCache.set(product.product_id, productEmbedding);
                }
            }

            if (productEmbedding) {
                const similarity = cosineSimilarity(queryEmbedding, productEmbedding);
                productSimilarities.push({
                    product,
                    similarity
                });
            }
        }

        // 4. S·∫Øp x·∫øp theo ƒë·ªô t∆∞∆°ng ƒë·ªìng v√† l·∫•y top results
        const topProducts = productSimilarities
            .sort((a, b) => b.similarity - a.similarity)
            .slice(0, limit)
            .map(item => {
                console.log(`üìà ${item.product.product_name}: ${(item.similarity * 100).toFixed(1)}% similarity`);
                return item.product;
            });

        console.log(`‚úÖ T√¨m th·∫•y ${topProducts.length} s·∫£n ph·∫©m li√™n quan`);
        return topProducts;

    } catch (error) {
        console.error('‚ùå L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m li√™n quan:', error);

        // Fallback: tr·∫£ v·ªÅ s·∫£n ph·∫©m c√≥ rating cao
        const groupedProducts = groupProducts(allProducts);
        return groupedProducts
            .filter(p => p.avg_rating >= 4)
            .slice(0, limit);
    }
}

// H√†m fallback t√¨m ki·∫øm theo t·ª´ kh√≥a
function searchByKeywords(query, allProducts, limit = 8) {
    const keywords = query.toLowerCase().split(' ').filter(word => word.length > 2);
    const groupedProducts = groupProducts(allProducts);

    const scoredProducts = groupedProducts.map(product => {
        const searchText = `${product.product_name} ${product.category} ${product.brand} ${product.material}`.toLowerCase();
        let score = 0;

        keywords.forEach(keyword => {
            if (searchText.includes(keyword)) {
                score += 1;
            }
        });

        return { product, score };
    });

    return scoredProducts
        .filter(item => item.score > 0)
        .sort((a, b) => b.score - a.score)
        .slice(0, limit)
        .map(item => item.product);
}

// T·∫°o th√¥ng tin s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng chu·ªói li·ªÅn m·∫°ch
function groupProducts(products) {
    const grouped = {};
    products.forEach(p => {
        const id = p.product_id;
        if (!grouped[id]) {
            grouped[id] = {
                product_id: id,
                product_name: p.product_name,
                brand: p.brand,
                category: p.category,
                material: p.material,
                avg_rating: p.avg_rating,
                price: Number(p.price).toFixed(0),
                discount: Number(p.discount).toFixed(0),
                final_price: Number(p.final_price).toFixed(0),
                colors: new Set(),
                sizes: new Set(),
                description: striptags(p.description || '').replace(/\s+/g, ' ').trim().slice(0, 120)
            };
        }
        grouped[id].colors.add(p.color);
        grouped[id].sizes.add(p.size);
    });

    return Object.values(grouped).map(p => ({
        ...p,
        colors: Array.from(p.colors).join('/'),
        sizes: Array.from(p.sizes).join('/')
    }));
}

export const sendMessage = async (req, res) => {
    try {
        const { userId, productId, messages } = req.body;
        let message = '';
        if (Array.isArray(messages) && messages.length > 0) {
            message = messages[messages.length - 1].content;
        }

        let mentioned_product_id_end = [];

        console.log("Messages from frontend:", messages);

        // ∆Øu ti√™n context t·ª´ FE n·∫øu c√≥
        let conversationContext = '';
        if (Array.isArray(messages) && messages.length > 0) {
            conversationContext = messages.map(
                m => `${m.sender === 'user' ? 'Ng∆∞·ªùi d√πng' : 'Bot'}: ${m.content}`
            ).join('\n');
        }

        // C·∫≠p nh·∫≠t l·ªãch s·ª≠ h·ªôi tho·∫°i v·ªõi context ng∆∞·ªùi d√πng
        if (message) {
            chatHistory.push(`Ng∆∞·ªùi d√πng ${userId ? `(ID: ${userId})` : ''}: ${message}`);
        }

        const command = await getCommand();
        console.log("Command:", command[0].contents);

        // L·∫•y danh s√°ch file l·ªánh t·ª´ th∆∞ m·ª•c uploads/commands
        const commandsDir = path.join(__dirname, '../../uploads/commands');
        let files = [];
        if (fs.existsSync(commandsDir)) {
            files = fs.readdirSync(commandsDir).filter(f => !fs.statSync(path.join(commandsDir, f)).isDirectory());
        }

        // ƒê·ªçc n·ªôi dung c√°c file l·ªánh
        const fileTexts = await Promise.all(
            files.map(async file => {
                const filePath = path.join(commandsDir, file);
                const text = await convertFileToText(filePath);
                if (!text) {
                    console.log(`‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung file: ${file}`);
                }
                return text;
            })
        );
        const fileContext = fileTexts.join("\n");
        console.log("File context:", fileContext);

        // **THAY ƒê·ªîI CH√çNH: L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m m·ªôt l·∫ßn**
        const allProducts = await getInforToCohere();
        console.log(`üìä T·ªïng s·ªë s·∫£n ph·∫©m trong DB: ${allProducts.length}`);

        // N·∫øu c√≥ userId v√† productId, c√≥ th·ªÉ l·∫•y th√¥ng tin c√° nh√¢n h√≥a
        let personalizedInfo = '';
        if (userId || productId) {
            try {
                const userProductInfo = await getInforToSuggestQuestions(userId, productId);
                if (userProductInfo && userProductInfo.length > 0) {
                    personalizedInfo = `\nTh√¥ng tin c√° nh√¢n h√≥a cho kh√°ch h√†ng:
                    - Gi·ªõi t√≠nh: ${userProductInfo[0]?.gender || 'Kh√¥ng x√°c ƒë·ªãnh'}
                    - S·∫£n ph·∫©m ƒë√£ xem/mua: ${userProductInfo.map(p => p.product_name).join(', ')}`;
                }
            } catch (error) {
                console.log("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin c√° nh√¢n h√≥a:", error.message);
            }
        }

        console.log("Th√¥ng tin c√° nh√¢n h√≥a:", personalizedInfo);

        // **THAY ƒê·ªîI CH√çNH: S·ª≠ d·ª•ng semantic search thay v√¨ t·∫•t c·∫£ s·∫£n ph·∫©m**
        let relevantProducts;

        if (message && message.trim().length > 0) {
            // Semantic search cho c√¢u h·ªèi c·ª• th·ªÉ
            relevantProducts = await searchRelevantProducts(message, allProducts, 8);

            // Fallback n·∫øu semantic search kh√¥ng t√¨m th·∫•y g√¨
            if (relevantProducts.length === 0) {
                console.log("üîÑ Fallback to keyword search");
                relevantProducts = searchByKeywords(message, allProducts, 8);
            }
        } else {
            // N·∫øu kh√¥ng c√≥ message, l·∫•y s·∫£n ph·∫©m top-rated
            const groupedProducts = groupProducts(allProducts);
            relevantProducts = groupedProducts
                .filter(p => p.avg_rating >= 4)
                .slice(0, 8);
        }

        // **T·∫°o productInfo t·ª´ s·∫£n ph·∫©m li√™n quan thay v√¨ t·∫•t c·∫£**
        const productInfo = relevantProducts.map(product =>
            `product_id: ${product.product_id}, 
            product_name: ${product.product_name}, 
            brand: ${product.brand}, 
            category: ${product.category}, 
            material: ${product.material}, 
            avg_rating: ${product.avg_rating || 'Kh√¥ng c√≥'}, 
            price: ${product.price}, 
            discount: ${product.discount}, 
            final_price: ${product.final_price}, 
            colors: ${product.colors}, 
            sizes: ${product.sizes}, 
            description: ${product.description}`
        ).join('\n');

        console.log(`üéØ S·ª≠ d·ª•ng ${relevantProducts.length} s·∫£n ph·∫©m li√™n quan thay v√¨ ${allProducts.length} s·∫£n ph·∫©m`);
        console.log("üìù S·ªë k√Ω t·ª± productInfo (t·ªëi ∆∞u):", productInfo.length);

        // T·∫°o prompt cho Cohere (gi·ªëng nh∆∞ c≈©)
        const prompt = `${command[0].contents}
${fileContext}
B·∫°n l√† chatbot b√°n qu·∫ßn √°o v√† l√† 1 nh√¢n vi√™n t∆∞ v·∫•n chuy√™n nghi·ªáp. 
Do l√† 1 nh√¢n vi√™n t∆∞ v·∫•n chuy√™n nghi·ªáp n√™n b·∫°n kh√¥ng ch·ªâ m·ªói tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m√† c√≤n t∆∞ v·∫•n c√°c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa kh√°ch h√†ng.
H√£y ƒë·ªçc hi·ªÉu c√¢u h·ªèi tr∆∞·ªõc khi tr·∫£ l·ªùi bao g·ªìm c·∫£ ng·ªØ c·∫£nh hay nh·ªØng th·ª© li√™n quan ƒë·∫øn c√¢u h·ªèi.
Tr·∫£ l·ªùi ni·ªÅm n·ªü, th√¢n thi·ªán v√† ch·ªß ƒë·ªông g·ª£i √Ω hay qu·∫£ng c√°o v·ªÅ s·∫£n ph·∫©m.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d∆∞·ªõi 200 t·ª´. N·∫øu c√¢u tr·∫£ l·ªùi qu√° d√†i h√£y t√≥m l·∫°i ƒë·ªÉ khi hi·ªÉn th·ªã kh√¥ng b·ªã m·∫•t ch·ªØ v√† g√¢y ra m·∫•t nghƒ©a c·ªßa c√¢u.
Ch·ªâ n√≥i v·ªÅ s·∫£n ph·∫©m c·ªßa shop. N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi c√¢u h·ªèi, h√£y tr·∫£ l·ªùi r·∫±ng kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p.

N·∫øu kh√°ch h·ªèi v·ªÅ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i, th·ªùi gian giao h√†ng, ch√≠nh s√°ch b·∫£o h√†nh, ƒë·ªïi tr·∫£,... th√¨:
- N·∫øu c√≥ d·ªØ li·ªáu li√™n quan trong ph·∫ßn ph√≠a tr√™n (v√≠ d·ª•: fileContext), h√£y tr·∫£ l·ªùi ƒë√∫ng theo d·ªØ li·ªáu ƒë√≥.
- N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu n√†o v·ªÅ v·∫•n ƒë·ªÅ kh√°ch h·ªèi, h√£y h∆∞·ªõng d·∫´n kh√°ch li√™n h·ªá v·ªõi nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng c·ªßa shop ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.

V√≠ d·ª•: N·∫øu c√≥ ƒëi·ªÅu kho·∫£n ƒë·ªïi tr·∫£ trong d·ªØ li·ªáu, h√£y tr·∫£ l·ªùi ƒë√∫ng n·ªôi dung ƒë√≥. N·∫øu kh√¥ng c√≥, ch·ªâ n√≥i "B·∫°n vui l√≤ng li√™n h·ªá CSKH ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt".

${personalizedInfo}

avg_rating l√† ƒëi·ªÉm ƒë√°nh gi√° trung b√¨nh c·ªßa s·∫£n ph·∫©m, ƒë∆∞·ª£c t√≠nh t·ª´ 1 ƒë·∫øn 5 sao.

D·ªØ li·ªáu s·∫£n ph·∫©m:  
${productInfo}

L·ªãch s·ª≠ h·ªôi tho·∫°i:  
${conversationContext}

Khi nh·∫Øc ƒë·∫øn b·∫•t k·ª≥ s·∫£n ph·∫©m n√†o trong d·ªØ li·ªáu, b·∫°n B·∫ÆT BU·ªòC ch·ªâ ƒë∆∞·ª£c ƒë√°nh d·∫•u t√™n s·∫£n ph·∫©m b·∫±ng c·∫∑p tag <PRODUCT|ID: ID_S·∫¢N_PH·∫®M> ... </PRODUCT|ID: ID_S·∫¢N_PH·∫®M> ƒë√∫ng v·ªõi ID trong d·ªØ li·ªáu. 
KH√îNG ƒë∆∞·ª£c t·∫°o b·∫•t k·ª≥ tag n√†o kh√°c nh∆∞ <COLOR|...>, <COLORS>...</COLORS>, <SIZE|...>, <SIZES>...</SIZES>, <BRAND|...> ho·∫∑c c√°c tag t∆∞∆°ng t·ª±.
Ch·ªâ ƒë√°nh d·∫•u tag n√†y cho t√™n s·∫£n ph·∫©m, kh√¥ng ƒë∆∞·ª£c ƒë√°nh d·∫•u cho c√°c th√¥ng tin kh√°c nh∆∞ m√†u s·∫Øc, k√≠ch th∆∞·ªõc, ch·∫•t li·ªáu, v.v.
N·∫øu kh√°ch h·ªèi v·ªÅ m√†u s·∫Øc, k√≠ch th∆∞·ªõc, ch·ªâ tr·∫£ l·ªùi d·∫°ng vƒÉn b·∫£n th√¥ng th∆∞·ªùng, KH√îNG d√πng tag n√†o c·∫£.
N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p trong d·ªØ li·ªáu, KH√îNG ƒë∆∞·ª£c ƒë√°nh d·∫•u tag n√†o c·∫£.

V√≠ d·ª• ƒë√∫ng:
Kh√°ch h·ªèi: "B·∫°n c√≥ √°o kho√°c th√¥ng gi√≥ kh√¥ng?"
Tr·∫£ l·ªùi: "<PRODUCT|ID: 80>√Åo kho√°c th√¥ng gi√≥ a.k.a. AIR-tech jacket AT.02</PRODUCT|ID: 80> l√† s·∫£n ph·∫©m n·ªïi b·∫≠t v·ªõi c√¥ng ngh·ªá AIR-tech‚Ñ¢ ƒë·ªôc quy·ªÅn..."

V√≠ d·ª• sai (KH√îNG ƒê∆Ø·ª¢C d√πng):
- <COLORS>...</COLORS>
- <SIZES>...</SIZES>
- <COLOR|...>
- <SIZE|...>

C√¢u h·ªèi: ${message}  
Tr·∫£ l·ªùi:
        `;

        console.log("Prompt g·ª≠i ƒë·∫øn Cohere (SendMessage):", prompt);
        console.log("Prompt length:", prompt.length);


        // G·ª≠i y√™u c·∫ßu ƒë·∫øn Cohere
        const response = await cohere.chat({
            model: 'command-r-plus',
            message: prompt,
            max_tokens: 300,
            temperature: 0.7,
        });

        // L∆∞u ph·∫£n h·ªìi c·ªßa chatbot v√†o l·ªãch s·ª≠
        let answer = response.text.trim();
        chatHistory.push(`Bot: ${answer}`);
        console.log("Ph·∫£n h·ªìi t·ª´ Cohere (SendMessage):", answer);

        // X·ª≠ l√Ω tag s·∫£n ph·∫©m
        const regex = /<PRODUCT\|ID: ([\d,]+)>.*?<\/PRODUCT\|ID: [\d,]+>/g;
        let match;

        while ((match = regex.exec(answer)) !== null) {
            const ids = match[1].split(',');
            mentioned_product_id_end.push(...ids);
        }

        // X√≥a tag kh·ªèi c√¢u tr·∫£ l·ªùi
        answer = answer.replace(/<PRODUCT\|ID: [\d,]+>|<\/PRODUCT\|ID: [\d,]+>/g, '');

        // N·∫øu c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p, l·∫•y th√¥ng tin chi ti·∫øt theo ID
        let mentionedProductsInfo = [];
        if (mentioned_product_id_end.length > 0) {
            try {
                const uniqueIds = [...new Set(mentioned_product_id_end)];
                mentionedProductsInfo = await getProductsByIdForCohere(uniqueIds);
            } catch (error) {
                console.error("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p:", error);
            }
        }

        console.log("ID s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p:", mentioned_product_id_end);
        console.log("S·ªë s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p:", mentionedProductsInfo.length);

        // Tr·∫£ k·∫øt qu·∫£ v·ªÅ cho frontend
        res.json({
            success: true,
            reply: answer,
            products: mentionedProductsInfo,
            userContext: {
                userId: userId,
                productId: productId,
                hasPersonalizedInfo: personalizedInfo !== ''
            }
        });

    } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω sendMessage:', error);
        res.status(500).json({
            success: false,
            message: 'L·ªói khi x·ª≠ l√Ω tin nh·∫Øn',
            error: error.message
        });
    }
};

export const getQuestionSuggestions = async (req, res) => {
    try {
        const { message } = req.query;
        console.log("Message:", message);

        let prompt = '';
        if (message && message.trim() !== '' && message !== 'undefined' && message !== 'null') {
            prompt = `
B·∫°n l√† m·ªôt kh√°ch h√†ng th·ª±c s·ª± ƒëang c√¢n nh·∫Øc mua s·∫Øm t·∫°i shop th·ªùi trang DNGSON.
B·∫°n v·ª´a h·ªèi: "${message}"

H√£y ƒë·∫∑t ra ƒë√∫ng 3 c√¢u h·ªèi ti·∫øp theo m√† m·ªôt kh√°ch h√†ng th·ª±c s·ª± s·∫Ω h·ªèi v·ªÅ s·∫£n ph·∫©m n√†y tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh mua, t·∫≠p trung v√†o c√°c kh√≠a c·∫°nh th·ª±c t·∫ø nh∆∞:
- Ch·∫•t li·ªáu, c·∫£m gi√°c m·∫∑c, ƒë·ªô b·ªÅn, xu·∫•t x·ª©
- T√≠nh nƒÉng n·ªïi b·∫≠t, c√¥ng ngh·ªá, ph√π h·ª£p m·ª•c ƒë√≠ch s·ª≠ d·ª•ng (v√≠ d·ª•: ƒëi m∆∞a, gi·ªØ ·∫•m, ch·ªëng n·∫Øng, ph·ªëi ƒë·ªì, v.v.)
- Ch√≠nh s√°ch ƒë·ªïi tr·∫£, b·∫£o h√†nh, ∆∞u ƒë√£i, tr·∫£i nghi·ªám th·ª±c t·∫ø c·ªßa kh√°ch h√†ng kh√°c
- G·ª£i √Ω ph·ªëi ƒë·ªì, m√†u s·∫Øc, size ph√π h·ª£p v·ªõi v√≥c d√°ng, phong c√°ch
- C√°ch b·∫£o qu·∫£n, gi·∫∑t ·ªßi, gi·ªØ form

Y√™u c·∫ßu:
- Kh√¥ng h·ªèi lan man, kh√¥ng h·ªèi v·ªÅ s·∫£n ph·∫©m kh√°c, kh√¥ng h·ªèi th√¥ng tin chung chung
- Kh√¥ng l·∫∑p l·∫°i c√¢u h·ªèi ƒë√£ h·ªèi ·ªü tr√™n
- M·ªói c√¢u h·ªèi tr√™n 1 d√≤ng ri√™ng, kh√¥ng ƒë√°nh s·ªë th·ª© t·ª±, kh√¥ng th√™m gi·∫£i th√≠ch
- T·ªëi ƒëa 15 t·ª´ m·ªói c√¢u, ng·∫Øn g·ªçn, ƒë√∫ng t√¢m l√Ω kh√°ch h√†ng
`;
        } else {
            prompt = `
B·∫°n l√† m·ªôt kh√°ch h√†ng l·∫ßn ƒë·∫ßu mua s·∫Øm online t·∫°i shop th·ªùi trang DNGSON.
H√£y nghƒ© nh∆∞ m·ªôt kh√°ch h√†ng m·ªõi, ƒë·∫∑t ra 3 c√¢u h·ªèi m·ªü ƒë·∫ßu ƒë√∫ng t√¢m l√Ω kh√°ch h√†ng ƒë·ªÉ b·∫Øt chuy·ªán v·ªõi shop.

Y√™u c·∫ßu:
- 3 c√¢u h·ªèi th·ª±c t·∫ø, g·∫ßn g≈©i, ƒë√∫ng t√¢m l√Ω kh√°ch h√†ng m·ªõi
- G·ª£i √Ω v·ªÅ ch·∫•t li·ªáu, c·∫£m gi√°c m·∫∑c, ∆∞u ƒë√£i, ph·ªëi ƒë·ªì, size, ƒë·ªïi tr·∫£, v.v.
- Kh√¥ng h·ªèi qu√° chung chung, kh√¥ng h·ªèi v·ªÅ th√¥ng tin shop kh√¥ng c√≥
- M·ªói c√¢u h·ªèi tr√™n 1 d√≤ng ri√™ng, kh√¥ng ƒë√°nh s·ªë th·ª© t·ª±
- T·ªëi ƒëa 15 t·ª´ m·ªói c√¢u
`;
        }

        const response = await cohere.chat({
            model: 'command-r-plus',
            message: prompt,
            max_tokens: 120,
            temperature: 0.8,
        });

        let suggestions = response.text.trim();
        suggestions = cleanSuggestions(suggestions);
        const suggestionArr = suggestions.split('\n').filter(Boolean);

        res.json({
            success: true,
            suggestions: suggestionArr,
        });

    } catch (error) {
        console.error('L·ªói khi t·∫°o g·ª£i √Ω c√¢u h·ªèi:', error);
        res.json({
            success: true,
            suggestions: [
                "S·∫£n ph·∫©m n√†o ƒëang ƒë∆∞·ª£c ∆∞a chu·ªông nh·∫•t?",
                "T√¥i n√™n ch·ªçn size nh∆∞ th·∫ø n√†o?",
                "C√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i n√†o kh√¥ng?"
            ],
        });
    }
};

// Helper functions
function getCurrentSeason() {
    const month = new Date().getMonth() + 1;
    if (month >= 12 || month <= 2) return 'winter';
    if (month >= 3 && month <= 5) return 'spring';
    if (month >= 6 && month <= 8) return 'summer';
    return 'autumn';
}

function cleanSuggestions(text) {
    return text
        .split('\n')
        .map(line => line.trim())
        .filter(line => line && line.length > 5)
        .map(line => {
            // Lo·∫°i b·ªè s·ªë th·ª© t·ª±, d·∫•u g·∫°ch ƒë·∫ßu d√≤ng
            line = line.replace(/^[\d\-\*\+‚Ä¢]\.\s*/, '');
            line = line.replace(/^[\d\-\*\+‚Ä¢]\s+/, '');
            line = line.replace(/^["'](.*)["']$/, '$1').trim();
            return line;
        })
        .filter(line => line && line.length > 5)
        .slice(0, 3)
        .join('\n');
}

function getFallbackSuggestions(season) {
    const suggestions = {
        winter: `√Åo kho√°c n√†o gi·ªØ ·∫•m nh·∫•t?
Outfit m√πa ƒë√¥ng n√†o ƒëang trend?
Ph·ª• ki·ªán g√¨ c·∫ßn thi·∫øt cho m√πa l·∫°nh?`,

        spring: `Set ƒë·ªì xu√¢n n√†o d·ªÖ ph·ªëi nh·∫•t?
M√†u s·∫Øc n√†o hot trong m√πa n√†y?
V·∫£i g√¨ tho√°ng m√°t cho th·ªùi ti·∫øt giao m√πa?`,

        summer: `Outfit m√πa h√® n√†o ƒëang viral?
Ch·∫•t li·ªáu n√†o m√°t m·∫ª nh·∫•t?
Trang ph·ª•c ƒëi bi·ªÉn c√≥ g√¨ hot?`,

        autumn: `Style thu n√†o ƒëang ƒë∆∞·ª£c y√™u th√≠ch?
√Åo len n√†o v·ª´a ·∫•m v·ª´a ƒë·∫πp?
C√°ch ph·ªëi ƒë·ªì layering nh∆∞ th·∫ø n√†o?`
    };

    return suggestions[season] || suggestions.autumn;
}

